import logging
import sqlite3
import os
import threading
from datetime import datetime
from pytz import timezone  # üîß –î–û–î–ê–ù–û
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —ñ ID –∞–¥–º—ñ–Ω-–≥—Ä—É–ø–∏
BOT_TOKEN = os.getenv("BOT_TOKEN", "7488970157:AAE24_QrAyc5rWyaMqiiOGpCZKPkXs68N0I")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "-1002512354620")

# –õ–æ–∫–∞—Ü—ñ—ó
LOCATIONS = {
    "location1": "üìç –ñ–ö –°–ª–∞–≤—É—Ç–∏—á",
    "location2": "üìç –≤—É–ª. –ê–Ω–Ω–∏ –ê—Ö–º–∞—Ç–æ–≤–æ—ó, 31",
    "location3": "üìç –≤—É–ª. –õ–∞—Ä–∏—Å–∏ –†—É–¥–µ–Ω–∫–æ 15/14"
}

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return 'Coffee Bot is running!'

@app.route('/health')
def health():
    return 'OK'

def run_web_server():
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)

class CoffeeReviewBot:
    def __init__(self):
        self.init_database()
    
    def init_database(self):
        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'coffee_reviews.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS reviews (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                location TEXT,
                rating INTEGER,
                comment TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()

    def save_review(self, user_id, username, location, rating, comment):
        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'coffee_reviews.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO reviews (user_id, username, location, rating, comment)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, username, location, rating, comment))
        conn.commit()
        conn.close()

bot = CoffeeReviewBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(loc_name, callback_data=f"location_{loc_id}")]
                for loc_id, loc_name in LOCATIONS.items()]
    await update.message.reply_text(
        "‚òï –í—ñ—Ç–∞—î–º–æ –≤ —Å–∏—Å—Ç–µ–º—ñ –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–æ –Ω–∞—à—É –∫–∞–≤—É! ‚òï\n\n–û–±–µ—Ä—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def location_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    location_id = query.data.split('_')[1]
    context.user_data['location'] = location_id
    context.user_data['location_name'] = LOCATIONS[location_id]

    keyboard = [[InlineKeyboardButton(f"{rating} ‚≠ê", callback_data=f"rating_{rating}")]
                for rating in range(1, 6)]

    await query.edit_message_text(
        f"–í–∏ –æ–±—Ä–∞–ª–∏: {LOCATIONS[location_id]}\n\n–û—Ü—ñ–Ω—ñ—Ç—å –Ω–∞—à—É –∫–∞–≤—É –≤—ñ–¥ 1 –¥–æ 5 –∑—ñ—Ä–æ–∫:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def rating_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[1])
    context.user_data['rating'] = rating

    location_name = context.user_data.get('location_name', '–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è')
    await query.edit_message_text(
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {location_name}\n‚≠ê –í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: {rating} ‚≠ê\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏."
    )

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_review_and_thank(update, context, "")

async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_review_and_thank(update, context, update.message.text)

async def save_review_and_thank(update: Update, context: ContextTypes.DEFAULT_TYPE, comment: str):
    user = update.effective_user
    location = context.user_data.get('location', 'unknown')
    location_name = context.user_data.get('location_name', '–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è')
    rating = context.user_data.get('rating', 0)

    bot.save_review(user.id, user.username or user.first_name, location, rating, comment)

    await update.message.reply_text(
        f"üôè –î—è–∫—É—î–º–æ!\nüìç {location_name}\n‚≠ê {rating} ‚≠ê\nüí¨ {comment or '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}\n\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start"
    )

    # üïê –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —á–∞—Å
    kyiv_time = datetime.now(timezone("Europe/Kyiv")).strftime("%d.%m.%Y %H:%M")

    admin_message = (
        f"üìù –ù–û–í–ò–ô –í–Ü–î–ì–£–ö\n\n"
        f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username or user.first_name}\n"
        f"üìç –õ–æ–∫–∞—Ü—ñ—è: {location_name}\n"
        f"‚≠ê –û—Ü—ñ–Ω–∫–∞: {rating} ‚≠ê\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment or '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}\n"
        f"üïê –ß–∞—Å: {kyiv_time}"
    )

    try:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É: {e}")

    context.user_data.clear()

def main():
    threading.Thread(target=run_web_server).start()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("skip", skip_comment))
    app.add_handler(CommandHandler("admin", admin_reviews))
    app.add_handler(CallbackQueryHandler(location_selected, pattern="^location_"))
    app.add_handler(CallbackQueryHandler(rating_selected, pattern="^rating_"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_comment))

    app.run_polling()

if __name__ == "__main__":
    main()
