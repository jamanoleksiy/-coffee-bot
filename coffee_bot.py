import logging
import sqlite3
import os
import threading
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–¥–ª—è –±–µ–∑–ø–µ–∫–∏ –Ω–∞ Render)
BOT_TOKEN = os.getenv("BOT_TOKEN", "7488970157:AAE24_QrAyc5rWyaMqiiOGpCZKPkXs68N0I")

# ID –≥—Ä—É–ø–∏ –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ (–æ—Ç—Ä–∏–º–∞–π—Ç–µ —á–µ—Ä–µ–∑ @userinfobot)
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "-1002512354620")

# –õ–æ–∫–∞—Ü—ñ—ó –∫–∞–≤'—è—Ä–µ–Ω—å
LOCATIONS = {
    "location1": "üìç –ñ–ö –°–ª–∞–≤—É—Ç–∏—á",
    "location2": "üìç –≤—É–ª. –ê–Ω–Ω–∏ –ê—Ö–º–∞—Ç–æ–≤–æ—ó, 31", 
    "location3": "üìç –≤—É–ª. –õ–∞—Ä–∏—Å–∏ –†—É–¥–µ–Ω–∫–æ 15/14"
}

# –î–æ–¥–∞—î–º–æ Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/ping', methods=['GET'])
def ping():
    return 'OK', 200


@app.route('/')
def home():
    return 'Coffee Bot is running!'

@app.route('/health')
def health():
    return 'OK'

@app.route('/ping')
def ping():
    return 'pong'

def run_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    try:
        port = int(os.environ.get('PORT', 10000))  # –ó–º—ñ–Ω–∏–ª–∏ –ø–æ—Ä—Ç –Ω–∞ 10000 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è Render)
        app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

def keep_alive():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±–æ—Ç–∞"""
    import time
    while True:
        try:
            time.sleep(300)  # –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
            logger.info("Bot is alive and working")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ keep_alive: {e}")

class CoffeeReviewBot:
    def __init__(self):
        self.init_database()
    
    def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'coffee_reviews.db')
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS reviews (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    location TEXT,
                    rating INTEGER,
                    comment TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
    
    def save_review(self, user_id, username, location, rating, comment):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
        try:
            db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'coffee_reviews.db')
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO reviews (user_id, username, location, rating, comment)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, username, location, rating, comment))
            
            conn.commit()
            conn.close()
            logger.info(f"–í—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {username} - {rating} ‚≠ê")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É: {e}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = CoffeeReviewBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü—ñ—ó"""
    try:
        keyboard = []
        
        for loc_id, loc_name in LOCATIONS.items():
            keyboard.append([InlineKeyboardButton(loc_name, callback_data=f"location_{loc_id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
üëã –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—é –ª–æ–∫–∞—Ü—ñ—é:
"""
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ start: {e}")

async def location_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ª–æ–∫–∞—Ü—ñ—ó"""
    try:
        query = update.callback_query
        await query.answer()
        
        location_id = query.data.split('_')[1]
        location_name = LOCATIONS[location_id]
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω—É –ª–æ–∫–∞—Ü—ñ—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['location'] = location_id
        context.user_data['location_name'] = location_name
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏
        keyboard = []
        for rating in range(1, 6):
            keyboard.append([InlineKeyboardButton(
                f"{rating} ‚≠ê", 
                callback_data=f"rating_{rating}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
–í–∏ –æ–±—Ä–∞–ª–∏: {location_name}

‚òïÔ∏è –Ø–∫ –≤–∞–º –∫–∞–≤–∞? –û–±–µ—Ä—ñ—Ç—å –æ—Ü—ñ–Ω–∫—É –≤—ñ–¥ 1 –¥–æ 5:
"""
        
        await query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –≤–∏–±–µ—Ä—ñ –ª–æ–∫–∞—Ü—ñ—ó: {e}")

async def rating_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –æ—Ü—ñ–Ω–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        rating = int(query.data.split('_')[1])
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ü—ñ–Ω–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data['rating'] = rating
        
        rating_text = f"{rating} ‚≠ê"
        location_name = context.user_data.get('location_name', '–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è')
        
        text = """
üìù –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –Ω–∞–ø–∏—à—ñ—Ç—å –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –∫–∞–≤—É –∞–±–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è.

–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä.
"""
        
        await query.edit_message_text(text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –≤–∏–±–µ—Ä—ñ —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")

async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
    try:
        await save_review_and_thank(update, context, "")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ skip_comment: {e}")

async def receive_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"""
    try:
        comment = update.message.text
        await save_review_and_thank(update, context, comment)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ receive_comment: {e}")

async def save_review_and_thank(update: Update, context: ContextTypes.DEFAULT_TYPE, comment: str) -> None:
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—è–∫–∏"""
    try:
        user = update.effective_user
        location = context.user_data.get('location', 'unknown')
        location_name = context.user_data.get('location_name', '–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è')
        rating = context.user_data.get('rating', 0)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–≥—É–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        bot.save_review(
            user_id=user.id,
            username=user.username or user.first_name,
            location=location,
            rating=rating,
            comment=comment
        )
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–¥—è–∫–∏
        thank_you_text = f"""
–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! ‚ù§Ô∏è

üìç –õ–æ–∫–∞—Ü—ñ—è: {location_name}
‚≠ê –û—Ü—ñ–Ω–∫–∞: {rating} ‚≠ê
üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment if comment else "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"}

–î–ª—è –Ω–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start
"""
        
        await update.message.reply_text(thank_you_text)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–≥—É–∫ –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É
        admin_message = f"""
üìù –ù–û–í–ò–ô –í–Ü–î–ì–£–ö

üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.username or user.first_name}
üìç –õ–æ–∫–∞—Ü—ñ—è: {location_name}  
‚≠ê –û—Ü—ñ–Ω–∫–∞: {rating} ‚≠ê
üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment if comment else "–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è"}
üïê –ß–∞—Å: {datetime.now().strftime("%d.%m.%Y %H:%M")}
"""
        
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º—ñ–Ω-–≥—Ä—É–ø—É: {e}")
        
        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        context.user_data.clear()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ save_review_and_thank: {e}")

async def admin_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    try:
        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'coffee_reviews.db')
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT username, location, rating, comment, timestamp 
            FROM reviews 
            ORDER BY timestamp DESC 
            LIMIT 10
        ''')
        
        reviews = cursor.fetchall()
        conn.close()
        
        if not reviews:
            await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.")
            return
        
        text = "üìä –û—Å—Ç–∞–Ω–Ω—ñ 10 –≤—ñ–¥–≥—É–∫—ñ–≤:\n\n"
        
        for review in reviews:
            username, location, rating, comment, timestamp = review
            location_name = LOCATIONS.get(location, location)
            
            text += f"üë§ {username}\n"
            text += f"üìç {location_name}\n"
            text += f"‚≠ê {rating}/5 ‚≠ê\n"
            text += f"üí¨ {comment if comment else '–ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è'}\n"
            text += f"üïê {timestamp}\n"
            text += "‚îÄ" * 30 + "\n\n"
        
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_reviews: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
        web_thread = threading.Thread(target=run_web_server)
        web_thread.daemon = True
        web_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        alive_thread = threading.Thread(target=keep_alive)
        alive_thread.daemon = True
        alive_thread.start()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("skip", skip_comment))
        application.add_handler(CommandHandler("reviews", admin_reviews))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ callback-–∑–∞–ø–∏—Ç—ñ–≤
        application.add_handler(CallbackQueryHandler(location_selected, pattern="^location_"))
        application.add_handler(CallbackQueryHandler(rating_selected, pattern="^rating_"))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_comment))
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ñ! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")

if __name__ == '__main__':
    main()
